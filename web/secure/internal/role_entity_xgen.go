// generated by xgen -- DO NOT EDIT
package internal

import (
	"bytes"

	"gopkg.in/goyy/goyy.v0/data/entity"
	"gopkg.in/goyy/goyy.v0/data/schema"
	"gopkg.in/goyy/goyy.v0/util/jsons"
	"gopkg.in/goyy/goyy.v0/util/strings"
)

var (
	ROLE       = schema.TABLE("sys_role", "ROLE")
	ROLE_ID    = ROLE.PRIMARY("id", "ID")
	ROLE_NAME  = ROLE.COLUMN("name", "NAME")
	ROLE_GENRE = ROLE.COLUMN("genre", "GENRE")
)

func NewRole() *Role {
	e := &Role{}
	e.init()
	return e
}

func (me *Role) Id() string {
	return me.id.Value()
}

func (me *Role) SetId(v string) {
	me.id.SetValue(v)
}

func (me *Role) Name() string {
	return me.name.Value()
}

func (me *Role) SetName(v string) {
	me.name.SetValue(v)
}

func (me *Role) Genre() string {
	return me.genre.Value()
}

func (me *Role) SetGenre(v string) {
	me.genre.SetValue(v)
}

func (me *Role) init() {
	me.table = ROLE
	me.initSetDict()
	me.initSetColumn()
	me.initSetDefault()
	me.initSetField()
	me.initSetExcel()
	me.initSetJson()
	me.initSetXml()
}

func (me *Role) initSetDict() {
}

func (me *Role) initSetColumn() {
	me.id.SetColumn(ROLE_ID)
	me.name.SetColumn(ROLE_NAME)
	me.genre.SetColumn(ROLE_GENRE)
}

func (me *Role) initSetDefault() {
}

func (me *Role) initSetField() {
	me.id.SetField(entity.DefaultField())
	me.name.SetField(entity.DefaultField())
	me.genre.SetField(entity.DefaultField())
}

func (me *Role) initSetExcel() {
}

func (me *Role) initSetJson() {
	me.id.Field().SetJson(entity.NewJsonBy("id"))
	me.name.Field().SetJson(entity.NewJsonBy("name"))
	me.genre.Field().SetJson(entity.NewJsonBy("genre"))
}

func (me *Role) initSetXml() {
	me.id.Field().SetXml(entity.NewXmlBy("id"))
	me.name.Field().SetXml(entity.NewXmlBy("name"))
	me.genre.Field().SetXml(entity.NewXmlBy("genre"))
}

func (me Role) New() entity.Interface {
	return NewRole()
}

func (me *Role) Get(column string) interface{} {
	switch column {
	case ROLE_ID.Name():
		return me.id.Value()
	case ROLE_NAME.Name():
		return me.name.Value()
	case ROLE_GENRE.Name():
		return me.genre.Value()
	}
	return nil
}

func (me *Role) GetPtr(column string) interface{} {
	switch column {
	case ROLE_ID.Name():
		return me.id.ValuePtr()
	case ROLE_NAME.Name():
		return me.name.ValuePtr()
	case ROLE_GENRE.Name():
		return me.genre.ValuePtr()
	}
	return nil
}

func (me *Role) GetString(field string) string {
	switch strings.ToLowerFirst(field) {
	case "id":
		return me.id.String()
	case "name":
		return me.name.String()
	case "genre":
		return me.genre.String()
	}
	return ""
}

func (me *Role) SetString(field, value string) error {
	switch strings.ToLowerFirst(field) {
	case "id":
		return me.id.SetString(value)
	case "name":
		return me.name.SetString(value)
	case "genre":
		return me.genre.SetString(value)
	}
	return nil
}

func (me *Role) Table() schema.Table {
	return me.table
}

func (me *Role) Type(column string) (entity.Type, bool) {
	switch column {
	case ROLE_ID.Name():
		return &me.id, true
	case ROLE_NAME.Name():
		return &me.name, true
	case ROLE_GENRE.Name():
		return &me.genre, true
	}
	return nil, false
}

func (me *Role) Column(field string) (schema.Column, bool) {
	switch strings.ToLowerFirst(field) {
	case "id":
		return ROLE_ID, true
	case "name":
		return ROLE_NAME, true
	case "genre":
		return ROLE_GENRE, true
	}
	return nil, false
}

func (me *Role) Columns() []schema.Column {
	return []schema.Column{
		ROLE_ID,
		ROLE_NAME,
		ROLE_GENRE,
	}
}

func (me *Role) Names() []string {
	return []string{
		"id",
		"name",
		"genre",
	}
}

func (me *Role) Value() *Role {
	return me
}

func (me *Role) Validate() error {
	return nil
}

func (me *Role) JSON() string {
	var b bytes.Buffer
	b.WriteString("{")
	b.WriteString(`,"id":"` + jsons.Format(me.GetString("id")) + `"`)
	b.WriteString(`,"name":"` + jsons.Format(me.GetString("name")) + `"`)
	b.WriteString(`,"genre":"` + jsons.Format(me.GetString("genre")) + `"`)
	b.WriteString("}")
	return b.String()
}

func (me *Role) ExcelColumns() []string {
	return nil
}
