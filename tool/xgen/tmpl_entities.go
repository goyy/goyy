// Copyright 2014 The goyy Authors.  All rights reserved.
// Use of this source code is governed by a MIT-style
// license that can be found in the LICENSE file.

package main

var tmplEntities = `// generated by xgen -- DO NOT EDIT
package <%.PackageName%>

import (
	"bytes"

	"gopkg.in/goyy/goyy.v0/data/entity"
)<%range $i, $e := .Entities%><%with $name := entities $e.Name%>

func New<%$name%>(v int) *<%$name%> {
	entities := &<%$name%>{}
	entities.Make(v)
	return entities
}

type <%$name%> struct {
	datas []*<%$e.Name%>
}

func (me *<%$name%>) Make(cap int) {
	me.datas = make([]*<%$e.Name%>, 0, cap)
}

func (me *<%$name%>) New() entity.Interface {
	return New<%$e.Name%>()
}

func (me *<%$name%>) Append(v entity.Interface) {
	me.datas = append(me.datas, v.(*<%$e.Name%>))
}

func (me *<%$name%>) Len() int {
	return len(me.datas)
}

func (me *<%$name%>) Cap() int {
	return cap(me.datas)
}

func (me *<%$name%>) Index(v int) entity.Interface {
	return me.datas[v]
}

func (me *<%$name%>) Slice() interface{} {
	return me.datas
}

func (me *<%$name%>) Value(v int) *<%$e.Name%> {
	return me.datas[v]
}

func (me *<%$name%>) Values() []*<%$e.Name%> {
	return me.datas
}

func (me *<%$name%>) JSON() string {
	var b bytes.Buffer
	b.WriteString(` + "`" + `{"datas":[` + "`" + `)
	for i := 0; i < me.Len(); i++ {
		if i > 0 {
			b.WriteString(",")
		}
		b.WriteString(me.Index(i).JSON())
	}
	b.WriteString("]}")
	return b.String()
}<%end%><%end%>
`
