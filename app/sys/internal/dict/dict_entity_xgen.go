// generated by xgen -- DO NOT EDIT
package dict

import (
	"bytes"

	"gopkg.in/goyy/goyy.v0/data/entity"
	"gopkg.in/goyy/goyy.v0/data/schema"
	"gopkg.in/goyy/goyy.v0/util/jsons"
	"gopkg.in/goyy/goyy.v0/util/strings"
)

var (
	ENTITY           = schema.TABLE("sys_dict", "DICT")
	ENTITY_ID        = ENTITY.PRIMARY("id", "ID")
	ENTITY_MEMO      = ENTITY.COLUMN("memo", "MEMO")
	ENTITY_CREATES   = ENTITY.COLUMN("creates", "CREATES")
	ENTITY_CREATER   = ENTITY.CREATER("creater", "CREATER")
	ENTITY_CREATED   = ENTITY.CREATED("created", "CREATED")
	ENTITY_MODIFIER  = ENTITY.MODIFIER("modifier", "MODIFIER")
	ENTITY_MODIFIED  = ENTITY.MODIFIED("modified", "MODIFIED")
	ENTITY_VERSION   = ENTITY.VERSION("version", "VERSION")
	ENTITY_DELETION  = ENTITY.DELETION("deletion", "DELETION")
	ENTITY_ARTIFICAL = ENTITY.COLUMN("artifical", "ARTIFICAL")
	ENTITY_HISTORY   = ENTITY.COLUMN("history", "HISTORY")
	ENTITY_GENRE     = ENTITY.COLUMN("genre", "GENRE")
	ENTITY_DESCR     = ENTITY.COLUMN("descr", "DESCR")
	ENTITY_MKEY      = ENTITY.COLUMN("mkey", "MKEY")
	ENTITY_MVAL      = ENTITY.COLUMN("mval", "MVAL")
	ENTITY_FILTERS   = ENTITY.COLUMN("filters", "FILTERS")
	ENTITY_ORDINAL   = ENTITY.COLUMN("ordinal", "ORDINAL")
)

func NewEntity() *Entity {
	e := &Entity{}
	e.init()
	return e
}

func (me *Entity) Genre() string {
	return me.genre.Value()
}

func (me *Entity) SetGenre(v string) {
	me.genre.SetValue(v)
}

func (me *Entity) Descr() string {
	return me.descr.Value()
}

func (me *Entity) SetDescr(v string) {
	me.descr.SetValue(v)
}

func (me *Entity) Mkey() string {
	return me.mkey.Value()
}

func (me *Entity) SetMkey(v string) {
	me.mkey.SetValue(v)
}

func (me *Entity) Mval() string {
	return me.mval.Value()
}

func (me *Entity) SetMval(v string) {
	me.mval.SetValue(v)
}

func (me *Entity) Filters() string {
	return me.filters.Value()
}

func (me *Entity) SetFilters(v string) {
	me.filters.SetValue(v)
}

func (me *Entity) Ordinal() string {
	return me.ordinal.Value()
}

func (me *Entity) SetOrdinal(v string) {
	me.ordinal.SetValue(v)
}

func (me *Entity) init() {
	me.table = ENTITY
	me.initSetDict()
	me.initSetColumn()
	me.initSetDefault()
	me.initSetField()
	me.initSetExcel()
	me.initSetJson()
	me.initSetXml()
}

func (me *Entity) initSetDict() {
}

func (me *Entity) initSetColumn() {
	if t, ok := me.Sys.Type("id"); ok {
		t.SetColumn(ENTITY_ID)
	}
	if t, ok := me.Sys.Type("memo"); ok {
		t.SetColumn(ENTITY_MEMO)
	}
	if t, ok := me.Sys.Type("creates"); ok {
		t.SetColumn(ENTITY_CREATES)
	}
	if t, ok := me.Sys.Type("creater"); ok {
		t.SetColumn(ENTITY_CREATER)
	}
	if t, ok := me.Sys.Type("created"); ok {
		t.SetColumn(ENTITY_CREATED)
	}
	if t, ok := me.Sys.Type("modifier"); ok {
		t.SetColumn(ENTITY_MODIFIER)
	}
	if t, ok := me.Sys.Type("modified"); ok {
		t.SetColumn(ENTITY_MODIFIED)
	}
	if t, ok := me.Sys.Type("version"); ok {
		t.SetColumn(ENTITY_VERSION)
	}
	if t, ok := me.Sys.Type("deletion"); ok {
		t.SetColumn(ENTITY_DELETION)
	}
	if t, ok := me.Sys.Type("artifical"); ok {
		t.SetColumn(ENTITY_ARTIFICAL)
	}
	if t, ok := me.Sys.Type("history"); ok {
		t.SetColumn(ENTITY_HISTORY)
	}
	me.genre.SetColumn(ENTITY_GENRE)
	me.descr.SetColumn(ENTITY_DESCR)
	me.mkey.SetColumn(ENTITY_MKEY)
	me.mval.SetColumn(ENTITY_MVAL)
	me.filters.SetColumn(ENTITY_FILTERS)
	me.ordinal.SetColumn(ENTITY_ORDINAL)
}

func (me *Entity) initSetDefault() {
	if t, ok := me.Sys.Type("created"); ok {
		t.SetDefault("-62135596800")
	}
	if t, ok := me.Sys.Type("modified"); ok {
		t.SetDefault("-62135596800")
	}
}

func (me *Entity) initSetField() {
	for _, c := range entity.SysColumns {
		if t, ok := me.Sys.Type(c); ok {
			t.SetField(entity.DefaultField())
		}
	}
	me.genre.SetField(entity.DefaultField())
	me.descr.SetField(entity.DefaultField())
	me.mkey.SetField(entity.DefaultField())
	me.mval.SetField(entity.DefaultField())
	me.filters.SetField(entity.DefaultField())
	me.ordinal.SetField(entity.DefaultField())
}

func (me *Entity) initSetExcel() {
}

func (me *Entity) initSetJson() {
	for _, c := range entity.SysColumns {
		if t, ok := me.Sys.Type(c); ok {
			t.Field().SetJson(entity.NewJsonBy(c))
		}
	}
	me.genre.Field().SetJson(entity.NewJsonBy("genre"))
	me.descr.Field().SetJson(entity.NewJsonBy("descr"))
	me.mkey.Field().SetJson(entity.NewJsonBy("mkey"))
	me.mval.Field().SetJson(entity.NewJsonBy("mval"))
	me.filters.Field().SetJson(entity.NewJsonBy("filters"))
	me.ordinal.Field().SetJson(entity.NewJsonBy("ordinal"))
}

func (me *Entity) initSetXml() {
	for _, c := range entity.SysColumns {
		if t, ok := me.Sys.Type(c); ok {
			t.Field().SetXml(entity.NewXmlBy(c))
		}
	}
	me.genre.Field().SetXml(entity.NewXmlBy("genre"))
	me.descr.Field().SetXml(entity.NewXmlBy("descr"))
	me.mkey.Field().SetXml(entity.NewXmlBy("mkey"))
	me.mval.Field().SetXml(entity.NewXmlBy("mval"))
	me.filters.Field().SetXml(entity.NewXmlBy("filters"))
	me.ordinal.Field().SetXml(entity.NewXmlBy("ordinal"))
}

func (me Entity) New() entity.Interface {
	return NewEntity()
}

func (me *Entity) Get(column string) interface{} {
	switch column {
	case ENTITY_GENRE.Name():
		return me.genre.Value()
	case ENTITY_DESCR.Name():
		return me.descr.Value()
	case ENTITY_MKEY.Name():
		return me.mkey.Value()
	case ENTITY_MVAL.Name():
		return me.mval.Value()
	case ENTITY_FILTERS.Name():
		return me.filters.Value()
	case ENTITY_ORDINAL.Name():
		return me.ordinal.Value()
	}
	return me.Sys.Get(column)
}

func (me *Entity) GetPtr(column string) interface{} {
	switch column {
	case ENTITY_GENRE.Name():
		return me.genre.ValuePtr()
	case ENTITY_DESCR.Name():
		return me.descr.ValuePtr()
	case ENTITY_MKEY.Name():
		return me.mkey.ValuePtr()
	case ENTITY_MVAL.Name():
		return me.mval.ValuePtr()
	case ENTITY_FILTERS.Name():
		return me.filters.ValuePtr()
	case ENTITY_ORDINAL.Name():
		return me.ordinal.ValuePtr()
	}
	return me.Sys.GetPtr(column)
}

func (me *Entity) GetString(field string) string {
	switch strings.ToLowerFirst(field) {
	case "genre":
		return me.genre.String()
	case "descr":
		return me.descr.String()
	case "mkey":
		return me.mkey.String()
	case "mval":
		return me.mval.String()
	case "filters":
		return me.filters.String()
	case "ordinal":
		return me.ordinal.String()
	}
	return me.Sys.GetString(field)
}

func (me *Entity) SetString(field, value string) error {
	switch strings.ToLowerFirst(field) {
	case "genre":
		return me.genre.SetString(value)
	case "descr":
		return me.descr.SetString(value)
	case "mkey":
		return me.mkey.SetString(value)
	case "mval":
		return me.mval.SetString(value)
	case "filters":
		return me.filters.SetString(value)
	case "ordinal":
		return me.ordinal.SetString(value)
	}
	return me.Sys.SetString(field, value)
}

func (me *Entity) Table() schema.Table {
	return me.table
}

func (me *Entity) Type(column string) (entity.Type, bool) {
	switch column {
	case ENTITY_GENRE.Name():
		return &me.genre, true
	case ENTITY_DESCR.Name():
		return &me.descr, true
	case ENTITY_MKEY.Name():
		return &me.mkey, true
	case ENTITY_MVAL.Name():
		return &me.mval, true
	case ENTITY_FILTERS.Name():
		return &me.filters, true
	case ENTITY_ORDINAL.Name():
		return &me.ordinal, true
	}
	return me.Sys.Type(column)
}

func (me *Entity) Column(field string) (schema.Column, bool) {
	switch strings.ToLowerFirst(field) {
	case "genre":
		return ENTITY_GENRE, true
	case "descr":
		return ENTITY_DESCR, true
	case "mkey":
		return ENTITY_MKEY, true
	case "mval":
		return ENTITY_MVAL, true
	case "filters":
		return ENTITY_FILTERS, true
	case "ordinal":
		return ENTITY_ORDINAL, true
	}
	return me.Sys.Column(field)
}

func (me *Entity) Columns() []schema.Column {
	return []schema.Column{
		ENTITY_ID,
		ENTITY_MEMO,
		ENTITY_CREATES,
		ENTITY_CREATER,
		ENTITY_CREATED,
		ENTITY_MODIFIER,
		ENTITY_MODIFIED,
		ENTITY_VERSION,
		ENTITY_DELETION,
		ENTITY_ARTIFICAL,
		ENTITY_HISTORY,
		ENTITY_GENRE,
		ENTITY_DESCR,
		ENTITY_MKEY,
		ENTITY_MVAL,
		ENTITY_FILTERS,
		ENTITY_ORDINAL,
	}
}

func (me *Entity) Names() []string {
	return []string{
		"id",
		"memo",
		"creates",
		"creater",
		"created",
		"modifier",
		"modified",
		"version",
		"deletion",
		"artifical",
		"history",
		"genre",
		"descr",
		"mkey",
		"mval",
		"filters",
		"ordinal",
	}
}

func (me *Entity) Value() *Entity {
	return me
}

func (me *Entity) Validate() error {
	return nil
}

func (me *Entity) JSON() string {
	var b bytes.Buffer
	b.WriteString("{")
	b.WriteString(`"id":"` + jsons.Format(me.GetString("id")) + `"`)
	b.WriteString(`,"memo":"` + jsons.Format(me.GetString("memo")) + `"`)
	b.WriteString(`,"creates":"` + jsons.Format(me.GetString("creates")) + `"`)
	b.WriteString(`,"creater":"` + jsons.Format(me.GetString("creater")) + `"`)
	b.WriteString(`,"created":` + me.GetString("created"))
	b.WriteString(`,"modifier":"` + jsons.Format(me.GetString("modifier")) + `"`)
	b.WriteString(`,"modified":` + me.GetString("modified"))
	b.WriteString(`,"version":` + me.GetString("version"))
	b.WriteString(`,"deletion":` + me.GetString("deletion"))
	b.WriteString(`,"artifical":` + me.GetString("artifical"))
	b.WriteString(`,"history":` + me.GetString("history"))
	b.WriteString(`,"genre":"` + jsons.Format(me.GetString("genre")) + `"`)
	b.WriteString(`,"descr":"` + jsons.Format(me.GetString("descr")) + `"`)
	b.WriteString(`,"mkey":"` + jsons.Format(me.GetString("mkey")) + `"`)
	b.WriteString(`,"mval":"` + jsons.Format(me.GetString("mval")) + `"`)
	b.WriteString(`,"filters":"` + jsons.Format(me.GetString("filters")) + `"`)
	b.WriteString(`,"ordinal":"` + jsons.Format(me.GetString("ordinal")) + `"`)
	b.WriteString("}")
	return b.String()
}

func (me *Entity) ExcelColumns() []string {
	return nil
}
