// generated by xgen -- DO NOT EDIT
package user

import (
	"bytes"

	"gopkg.in/goyy/goyy.v0/data/entity"
	"gopkg.in/goyy/goyy.v0/data/schema"
	"gopkg.in/goyy/goyy.v0/util/jsons"
	"gopkg.in/goyy/goyy.v0/util/strings"
)

var (
	ROLE_ENTITY           = schema.TABLE("sys_user_role", "USER ROLE")
	ROLE_ENTITY_ID        = ROLE_ENTITY.PRIMARY("id", "标识")
	ROLE_ENTITY_MEMO      = ROLE_ENTITY.COLUMN("memo", "备注")
	ROLE_ENTITY_CREATES   = ROLE_ENTITY.COLUMN("creates", "创建机构")
	ROLE_ENTITY_CREATER   = ROLE_ENTITY.CREATER("creater", "创建人员")
	ROLE_ENTITY_CREATED   = ROLE_ENTITY.CREATED("created", "创建时间")
	ROLE_ENTITY_MODIFIER  = ROLE_ENTITY.MODIFIER("modifier", "更新人员")
	ROLE_ENTITY_MODIFIED  = ROLE_ENTITY.MODIFIED("modified", "更新时间")
	ROLE_ENTITY_VERSION   = ROLE_ENTITY.VERSION("version", "乐观锁")
	ROLE_ENTITY_DELETION  = ROLE_ENTITY.DELETION("deletion", "删除标志")
	ROLE_ENTITY_ARTIFICAL = ROLE_ENTITY.COLUMN("artifical", "人造数据")
	ROLE_ENTITY_HISTORY   = ROLE_ENTITY.COLUMN("history", "历史数据")
	ROLE_ENTITY_USER_ID   = ROLE_ENTITY.COLUMN("user_id", "USER_ID")
	ROLE_ENTITY_ROLE_ID   = ROLE_ENTITY.COLUMN("role_id", "ROLE_ID")
)

func NewRoleEntity() *RoleEntity {
	e := &RoleEntity{}
	e.init()
	return e
}

func (me *RoleEntity) UserId() string {
	return me.userId.Value()
}

func (me *RoleEntity) SetUserId(v string) {
	me.userId.SetValue(v)
}

func (me *RoleEntity) RoleId() string {
	return me.roleId.Value()
}

func (me *RoleEntity) SetRoleId(v string) {
	me.roleId.SetValue(v)
}

func (me *RoleEntity) init() {
	me.table = ROLE_ENTITY
	me.initSetDict()
	me.initSetColumn()
	me.initSetDefault()
	me.initSetField()
	me.initSetExcel()
	me.initSetJson()
	me.initSetXml()
}

func (me *RoleEntity) initSetDict() {
}

func (me *RoleEntity) initSetColumn() {
	if t, ok := me.Sys.Type("id"); ok {
		t.SetColumn(ROLE_ENTITY_ID)
	}
	if t, ok := me.Sys.Type("memo"); ok {
		t.SetColumn(ROLE_ENTITY_MEMO)
	}
	if t, ok := me.Sys.Type("creates"); ok {
		t.SetColumn(ROLE_ENTITY_CREATES)
	}
	if t, ok := me.Sys.Type("creater"); ok {
		t.SetColumn(ROLE_ENTITY_CREATER)
	}
	if t, ok := me.Sys.Type("created"); ok {
		t.SetColumn(ROLE_ENTITY_CREATED)
	}
	if t, ok := me.Sys.Type("modifier"); ok {
		t.SetColumn(ROLE_ENTITY_MODIFIER)
	}
	if t, ok := me.Sys.Type("modified"); ok {
		t.SetColumn(ROLE_ENTITY_MODIFIED)
	}
	if t, ok := me.Sys.Type("version"); ok {
		t.SetColumn(ROLE_ENTITY_VERSION)
	}
	if t, ok := me.Sys.Type("deletion"); ok {
		t.SetColumn(ROLE_ENTITY_DELETION)
	}
	if t, ok := me.Sys.Type("artifical"); ok {
		t.SetColumn(ROLE_ENTITY_ARTIFICAL)
	}
	if t, ok := me.Sys.Type("history"); ok {
		t.SetColumn(ROLE_ENTITY_HISTORY)
	}
	me.userId.SetColumn(ROLE_ENTITY_USER_ID)
	me.roleId.SetColumn(ROLE_ENTITY_ROLE_ID)
}

func (me *RoleEntity) initSetDefault() {
	if t, ok := me.Sys.Type("created"); ok {
		t.SetDefault("-62135596800")
	}
	if t, ok := me.Sys.Type("modified"); ok {
		t.SetDefault("-62135596800")
	}
}

func (me *RoleEntity) initSetField() {
	for _, c := range entity.SysColumns {
		if t, ok := me.Sys.Type(c); ok {
			t.SetField(entity.DefaultField())
		}
	}
	me.userId.SetField(entity.DefaultField())
	me.roleId.SetField(entity.DefaultField())
}

func (me *RoleEntity) initSetExcel() {
}

func (me *RoleEntity) initSetJson() {
	for _, c := range entity.SysColumns {
		if t, ok := me.Sys.Type(c); ok {
			t.Field().SetJson(entity.NewJsonBy(c))
		}
	}
	me.userId.Field().SetJson(entity.NewJsonBy("userId"))
	me.roleId.Field().SetJson(entity.NewJsonBy("roleId"))
}

func (me *RoleEntity) initSetXml() {
	for _, c := range entity.SysColumns {
		if t, ok := me.Sys.Type(c); ok {
			t.Field().SetXml(entity.NewXmlBy(c))
		}
	}
	me.userId.Field().SetXml(entity.NewXmlBy("userId"))
	me.roleId.Field().SetXml(entity.NewXmlBy("roleId"))
}

func (me RoleEntity) New() entity.Interface {
	return NewRoleEntity()
}

func (me *RoleEntity) Get(column string) interface{} {
	switch column {
	case ROLE_ENTITY_USER_ID.Name():
		return me.userId.Value()
	case ROLE_ENTITY_ROLE_ID.Name():
		return me.roleId.Value()
	}
	return me.Sys.Get(column)
}

func (me *RoleEntity) GetPtr(column string) interface{} {
	switch column {
	case ROLE_ENTITY_USER_ID.Name():
		return me.userId.ValuePtr()
	case ROLE_ENTITY_ROLE_ID.Name():
		return me.roleId.ValuePtr()
	}
	return me.Sys.GetPtr(column)
}

func (me *RoleEntity) GetString(field string) string {
	switch strings.ToLowerFirst(field) {
	case "userId":
		return me.userId.String()
	case "roleId":
		return me.roleId.String()
	}
	return me.Sys.GetString(field)
}

func (me *RoleEntity) SetString(field, value string) error {
	switch strings.ToLowerFirst(field) {
	case "userId":
		return me.userId.SetString(value)
	case "roleId":
		return me.roleId.SetString(value)
	}
	return me.Sys.SetString(field, value)
}

func (me *RoleEntity) Table() schema.Table {
	return me.table
}

func (me *RoleEntity) Type(column string) (entity.Type, bool) {
	switch column {
	case ROLE_ENTITY_USER_ID.Name():
		return &me.userId, true
	case ROLE_ENTITY_ROLE_ID.Name():
		return &me.roleId, true
	}
	return me.Sys.Type(column)
}

func (me *RoleEntity) Column(field string) (schema.Column, bool) {
	switch strings.ToLowerFirst(field) {
	case "userId":
		return ROLE_ENTITY_USER_ID, true
	case "roleId":
		return ROLE_ENTITY_ROLE_ID, true
	}
	return me.Sys.Column(field)
}

func (me *RoleEntity) Columns() []schema.Column {
	return []schema.Column{
		ROLE_ENTITY_ID,
		ROLE_ENTITY_MEMO,
		ROLE_ENTITY_CREATES,
		ROLE_ENTITY_CREATER,
		ROLE_ENTITY_CREATED,
		ROLE_ENTITY_MODIFIER,
		ROLE_ENTITY_MODIFIED,
		ROLE_ENTITY_VERSION,
		ROLE_ENTITY_DELETION,
		ROLE_ENTITY_ARTIFICAL,
		ROLE_ENTITY_HISTORY,
		ROLE_ENTITY_USER_ID,
		ROLE_ENTITY_ROLE_ID,
	}
}

func (me *RoleEntity) Names() []string {
	return []string{
		"id",
		"memo",
		"creates",
		"creater",
		"created",
		"modifier",
		"modified",
		"version",
		"deletion",
		"artifical",
		"history",
		"userId",
		"roleId",
	}
}

func (me *RoleEntity) Value() *RoleEntity {
	return me
}

func (me *RoleEntity) Validate() error {
	return nil
}

func (me *RoleEntity) JSON() string {
	var b bytes.Buffer
	b.WriteString("{")
	b.WriteString(`"id":"` + jsons.Format(me.GetString("id")) + `"`)
	b.WriteString(`,"memo":"` + jsons.Format(me.GetString("memo")) + `"`)
	b.WriteString(`,"creates":"` + jsons.Format(me.GetString("creates")) + `"`)
	b.WriteString(`,"creater":"` + jsons.Format(me.GetString("creater")) + `"`)
	b.WriteString(`,"created":` + me.GetString("created"))
	b.WriteString(`,"modifier":"` + jsons.Format(me.GetString("modifier")) + `"`)
	b.WriteString(`,"modified":` + me.GetString("modified"))
	b.WriteString(`,"version":` + me.GetString("version"))
	b.WriteString(`,"deletion":` + me.GetString("deletion"))
	b.WriteString(`,"artifical":` + me.GetString("artifical"))
	b.WriteString(`,"history":` + me.GetString("history"))
	b.WriteString(`,"userId":"` + jsons.Format(me.GetString("userId")) + `"`)
	b.WriteString(`,"roleId":"` + jsons.Format(me.GetString("roleId")) + `"`)
	b.WriteString("}")
	return b.String()
}

func (me *RoleEntity) ExcelColumns() []string {
	return nil
}
