// generated by xgen -- DO NOT EDIT
package user

import (
	"bytes"

	"gopkg.in/goyy/goyy.v0/data/entity"
	"gopkg.in/goyy/goyy.v0/data/schema"
	"gopkg.in/goyy/goyy.v0/util/jsons"
	"gopkg.in/goyy/goyy.v0/util/strings"
)

var (
	ENTITY                = schema.TABLE("sys_user", "USER")
	ENTITY_ID             = ENTITY.PRIMARY("id", "标识")
	ENTITY_MEMO           = ENTITY.COLUMN("memo", "备注")
	ENTITY_CREATES        = ENTITY.COLUMN("creates", "创建机构")
	ENTITY_CREATER        = ENTITY.CREATER("creater", "创建人员")
	ENTITY_CREATED        = ENTITY.CREATED("created", "创建时间")
	ENTITY_MODIFIER       = ENTITY.MODIFIER("modifier", "更新人员")
	ENTITY_MODIFIED       = ENTITY.MODIFIED("modified", "更新时间")
	ENTITY_VERSION        = ENTITY.VERSION("version", "乐观锁")
	ENTITY_DELETION       = ENTITY.DELETION("deletion", "删除标志")
	ENTITY_ARTIFICAL      = ENTITY.COLUMN("artifical", "人造数据")
	ENTITY_HISTORY        = ENTITY.COLUMN("history", "历史数据")
	ENTITY_UID            = ENTITY.COLUMN("uid", "UID")
	ENTITY_CODE           = ENTITY.COLUMN("code", "CODE")
	ENTITY_NAME           = ENTITY.COLUMN("name", "NAME")
	ENTITY_PASSWD         = ENTITY.COLUMN("passwd", "PASSWD")
	ENTITY_GENRE          = ENTITY.COLUMN("genre", "GENRE")
	ENTITY_EMAIL          = ENTITY.COLUMN("email", "EMAIL")
	ENTITY_TEL            = ENTITY.COLUMN("tel", "TEL")
	ENTITY_MOBILE         = ENTITY.COLUMN("mobile", "MOBILE")
	ENTITY_AREA_ID        = ENTITY.COLUMN("area_id", "AREA_ID")
	ENTITY_ORG_ID         = ENTITY.COLUMN("org_id", "ORG_ID")
	ENTITY_LOGIN_NAME     = ENTITY.COLUMN("login_name", "LOGIN NAME")
	ENTITY_DIMISSION      = ENTITY.COLUMN("dimission", "DIMISSION")
	ENTITY_DIMISSION_TIME = ENTITY.COLUMN("dimission_time", "DIMISSION TIME")
	ENTITY_FREEZE         = ENTITY.COLUMN("freeze", "FREEZE")
	ENTITY_FREEZE_TIME    = ENTITY.COLUMN("freeze_time", "FREEZE TIME")
	ENTITY_ROLE_IDS       = ENTITY.TRANSIENT("role_ids", "ROLE_IDS")
)

func NewEntity() *Entity {
	e := &Entity{}
	e.init()
	return e
}

func (me *Entity) Uid() string {
	return me.uid.Value()
}

func (me *Entity) SetUid(v string) {
	me.uid.SetValue(v)
}

func (me *Entity) Code() string {
	return me.code.Value()
}

func (me *Entity) SetCode(v string) {
	me.code.SetValue(v)
}

func (me *Entity) Name() string {
	return me.name.Value()
}

func (me *Entity) SetName(v string) {
	me.name.SetValue(v)
}

func (me *Entity) Passwd() string {
	return me.passwd.Value()
}

func (me *Entity) SetPasswd(v string) {
	me.passwd.SetValue(v)
}

func (me *Entity) Genre() string {
	return me.genre.Value()
}

func (me *Entity) SetGenre(v string) {
	me.genre.SetValue(v)
}

func (me *Entity) Email() string {
	return me.email.Value()
}

func (me *Entity) SetEmail(v string) {
	me.email.SetValue(v)
}

func (me *Entity) Tel() string {
	return me.tel.Value()
}

func (me *Entity) SetTel(v string) {
	me.tel.SetValue(v)
}

func (me *Entity) Mobile() string {
	return me.mobile.Value()
}

func (me *Entity) SetMobile(v string) {
	me.mobile.SetValue(v)
}

func (me *Entity) AreaId() string {
	return me.areaId.Value()
}

func (me *Entity) SetAreaId(v string) {
	me.areaId.SetValue(v)
}

func (me *Entity) OrgId() string {
	return me.orgId.Value()
}

func (me *Entity) SetOrgId(v string) {
	me.orgId.SetValue(v)
}

func (me *Entity) LoginName() string {
	return me.loginName.Value()
}

func (me *Entity) SetLoginName(v string) {
	me.loginName.SetValue(v)
}

func (me *Entity) Dimission() string {
	return me.dimission.Value()
}

func (me *Entity) SetDimission(v string) {
	me.dimission.SetValue(v)
}

func (me *Entity) DimissionTime() int64 {
	return me.dimissionTime.Value()
}

func (me *Entity) SetDimissionTime(v int64) {
	me.dimissionTime.SetValue(v)
}

func (me *Entity) Freeze() string {
	return me.freeze.Value()
}

func (me *Entity) SetFreeze(v string) {
	me.freeze.SetValue(v)
}

func (me *Entity) FreezeTime() int64 {
	return me.freezeTime.Value()
}

func (me *Entity) SetFreezeTime(v int64) {
	me.freezeTime.SetValue(v)
}

func (me *Entity) RoleIds() string {
	return me.roleIds.Value()
}

func (me *Entity) SetRoleIds(v string) {
	me.roleIds.SetValue(v)
}

func (me *Entity) init() {
	me.table = ENTITY
	me.initSetDict()
	me.initSetColumn()
	me.initSetDefault()
	me.initSetField()
	me.initSetExcel()
	me.initSetJson()
	me.initSetXml()
}

func (me *Entity) initSetDict() {
}

func (me *Entity) initSetColumn() {
	if t, ok := me.Sys.Type("id"); ok {
		t.SetColumn(ENTITY_ID)
	}
	if t, ok := me.Sys.Type("memo"); ok {
		t.SetColumn(ENTITY_MEMO)
	}
	if t, ok := me.Sys.Type("creates"); ok {
		t.SetColumn(ENTITY_CREATES)
	}
	if t, ok := me.Sys.Type("creater"); ok {
		t.SetColumn(ENTITY_CREATER)
	}
	if t, ok := me.Sys.Type("created"); ok {
		t.SetColumn(ENTITY_CREATED)
	}
	if t, ok := me.Sys.Type("modifier"); ok {
		t.SetColumn(ENTITY_MODIFIER)
	}
	if t, ok := me.Sys.Type("modified"); ok {
		t.SetColumn(ENTITY_MODIFIED)
	}
	if t, ok := me.Sys.Type("version"); ok {
		t.SetColumn(ENTITY_VERSION)
	}
	if t, ok := me.Sys.Type("deletion"); ok {
		t.SetColumn(ENTITY_DELETION)
	}
	if t, ok := me.Sys.Type("artifical"); ok {
		t.SetColumn(ENTITY_ARTIFICAL)
	}
	if t, ok := me.Sys.Type("history"); ok {
		t.SetColumn(ENTITY_HISTORY)
	}
	me.uid.SetColumn(ENTITY_UID)
	me.code.SetColumn(ENTITY_CODE)
	me.name.SetColumn(ENTITY_NAME)
	me.passwd.SetColumn(ENTITY_PASSWD)
	me.genre.SetColumn(ENTITY_GENRE)
	me.email.SetColumn(ENTITY_EMAIL)
	me.tel.SetColumn(ENTITY_TEL)
	me.mobile.SetColumn(ENTITY_MOBILE)
	me.areaId.SetColumn(ENTITY_AREA_ID)
	me.orgId.SetColumn(ENTITY_ORG_ID)
	me.loginName.SetColumn(ENTITY_LOGIN_NAME)
	me.dimission.SetColumn(ENTITY_DIMISSION)
	me.dimissionTime.SetColumn(ENTITY_DIMISSION_TIME)
	me.freeze.SetColumn(ENTITY_FREEZE)
	me.freezeTime.SetColumn(ENTITY_FREEZE_TIME)
	me.roleIds.SetColumn(ENTITY_ROLE_IDS)
}

func (me *Entity) initSetDefault() {
	if t, ok := me.Sys.Type("created"); ok {
		t.SetDefault("-62135596800")
	}
	if t, ok := me.Sys.Type("modified"); ok {
		t.SetDefault("-62135596800")
	}
}

func (me *Entity) initSetField() {
	for _, c := range entity.SysColumns {
		if t, ok := me.Sys.Type(c); ok {
			t.SetField(entity.DefaultField())
		}
	}
	me.uid.SetField(entity.DefaultField())
	me.code.SetField(entity.DefaultField())
	me.name.SetField(entity.DefaultField())
	me.passwd.SetField(entity.DefaultField())
	me.genre.SetField(entity.DefaultField())
	me.email.SetField(entity.DefaultField())
	me.tel.SetField(entity.DefaultField())
	me.mobile.SetField(entity.DefaultField())
	me.areaId.SetField(entity.DefaultField())
	me.orgId.SetField(entity.DefaultField())
	me.loginName.SetField(entity.DefaultField())
	me.dimission.SetField(entity.DefaultField())
	me.dimissionTime.SetField(entity.DefaultField())
	me.freeze.SetField(entity.DefaultField())
	me.freezeTime.SetField(entity.DefaultField())
	me.roleIds.SetField(entity.DefaultField())
}

func (me *Entity) initSetExcel() {
}

func (me *Entity) initSetJson() {
	for _, c := range entity.SysColumns {
		if t, ok := me.Sys.Type(c); ok {
			t.Field().SetJson(entity.NewJsonBy(c))
		}
	}
	me.uid.Field().SetJson(entity.NewJsonBy("uid"))
	me.code.Field().SetJson(entity.NewJsonBy("code"))
	me.name.Field().SetJson(entity.NewJsonBy("name"))
	me.passwd.Field().SetJson(entity.NewJsonBy("passwd"))
	me.genre.Field().SetJson(entity.NewJsonBy("genre"))
	me.email.Field().SetJson(entity.NewJsonBy("email"))
	me.tel.Field().SetJson(entity.NewJsonBy("tel"))
	me.mobile.Field().SetJson(entity.NewJsonBy("mobile"))
	me.areaId.Field().SetJson(entity.NewJsonBy("areaId"))
	me.orgId.Field().SetJson(entity.NewJsonBy("orgId"))
	me.loginName.Field().SetJson(entity.NewJsonBy("loginName"))
	me.dimission.Field().SetJson(entity.NewJsonBy("dimission"))
	me.dimissionTime.Field().SetJson(entity.NewJsonBy("dimissionTime"))
	me.freeze.Field().SetJson(entity.NewJsonBy("freeze"))
	me.freezeTime.Field().SetJson(entity.NewJsonBy("freezeTime"))
	me.roleIds.Field().SetJson(entity.NewJsonBy("roleIds"))
}

func (me *Entity) initSetXml() {
	for _, c := range entity.SysColumns {
		if t, ok := me.Sys.Type(c); ok {
			t.Field().SetXml(entity.NewXmlBy(c))
		}
	}
	me.uid.Field().SetXml(entity.NewXmlBy("uid"))
	me.code.Field().SetXml(entity.NewXmlBy("code"))
	me.name.Field().SetXml(entity.NewXmlBy("name"))
	me.passwd.Field().SetXml(entity.NewXmlBy("passwd"))
	me.genre.Field().SetXml(entity.NewXmlBy("genre"))
	me.email.Field().SetXml(entity.NewXmlBy("email"))
	me.tel.Field().SetXml(entity.NewXmlBy("tel"))
	me.mobile.Field().SetXml(entity.NewXmlBy("mobile"))
	me.areaId.Field().SetXml(entity.NewXmlBy("areaId"))
	me.orgId.Field().SetXml(entity.NewXmlBy("orgId"))
	me.loginName.Field().SetXml(entity.NewXmlBy("loginName"))
	me.dimission.Field().SetXml(entity.NewXmlBy("dimission"))
	me.dimissionTime.Field().SetXml(entity.NewXmlBy("dimissionTime"))
	me.freeze.Field().SetXml(entity.NewXmlBy("freeze"))
	me.freezeTime.Field().SetXml(entity.NewXmlBy("freezeTime"))
	me.roleIds.Field().SetXml(entity.NewXmlBy("roleIds"))
}

func (me Entity) New() entity.Interface {
	return NewEntity()
}

func (me *Entity) Get(column string) interface{} {
	switch column {
	case ENTITY_UID.Name():
		return me.uid.Value()
	case ENTITY_CODE.Name():
		return me.code.Value()
	case ENTITY_NAME.Name():
		return me.name.Value()
	case ENTITY_PASSWD.Name():
		return me.passwd.Value()
	case ENTITY_GENRE.Name():
		return me.genre.Value()
	case ENTITY_EMAIL.Name():
		return me.email.Value()
	case ENTITY_TEL.Name():
		return me.tel.Value()
	case ENTITY_MOBILE.Name():
		return me.mobile.Value()
	case ENTITY_AREA_ID.Name():
		return me.areaId.Value()
	case ENTITY_ORG_ID.Name():
		return me.orgId.Value()
	case ENTITY_LOGIN_NAME.Name():
		return me.loginName.Value()
	case ENTITY_DIMISSION.Name():
		return me.dimission.Value()
	case ENTITY_DIMISSION_TIME.Name():
		return me.dimissionTime.Value()
	case ENTITY_FREEZE.Name():
		return me.freeze.Value()
	case ENTITY_FREEZE_TIME.Name():
		return me.freezeTime.Value()
	case ENTITY_ROLE_IDS.Name():
		return me.roleIds.Value()
	}
	return me.Sys.Get(column)
}

func (me *Entity) GetPtr(column string) interface{} {
	switch column {
	case ENTITY_UID.Name():
		return me.uid.ValuePtr()
	case ENTITY_CODE.Name():
		return me.code.ValuePtr()
	case ENTITY_NAME.Name():
		return me.name.ValuePtr()
	case ENTITY_PASSWD.Name():
		return me.passwd.ValuePtr()
	case ENTITY_GENRE.Name():
		return me.genre.ValuePtr()
	case ENTITY_EMAIL.Name():
		return me.email.ValuePtr()
	case ENTITY_TEL.Name():
		return me.tel.ValuePtr()
	case ENTITY_MOBILE.Name():
		return me.mobile.ValuePtr()
	case ENTITY_AREA_ID.Name():
		return me.areaId.ValuePtr()
	case ENTITY_ORG_ID.Name():
		return me.orgId.ValuePtr()
	case ENTITY_LOGIN_NAME.Name():
		return me.loginName.ValuePtr()
	case ENTITY_DIMISSION.Name():
		return me.dimission.ValuePtr()
	case ENTITY_DIMISSION_TIME.Name():
		return me.dimissionTime.ValuePtr()
	case ENTITY_FREEZE.Name():
		return me.freeze.ValuePtr()
	case ENTITY_FREEZE_TIME.Name():
		return me.freezeTime.ValuePtr()
	case ENTITY_ROLE_IDS.Name():
		return me.roleIds.ValuePtr()
	}
	return me.Sys.GetPtr(column)
}

func (me *Entity) GetString(field string) string {
	switch strings.ToLowerFirst(field) {
	case "uid":
		return me.uid.String()
	case "code":
		return me.code.String()
	case "name":
		return me.name.String()
	case "passwd":
		return me.passwd.String()
	case "genre":
		return me.genre.String()
	case "email":
		return me.email.String()
	case "tel":
		return me.tel.String()
	case "mobile":
		return me.mobile.String()
	case "areaId":
		return me.areaId.String()
	case "orgId":
		return me.orgId.String()
	case "loginName":
		return me.loginName.String()
	case "dimission":
		return me.dimission.String()
	case "dimissionTime":
		return me.dimissionTime.String()
	case "freeze":
		return me.freeze.String()
	case "freezeTime":
		return me.freezeTime.String()
	case "roleIds":
		return me.roleIds.String()
	}
	return me.Sys.GetString(field)
}

func (me *Entity) SetString(field, value string) error {
	switch strings.ToLowerFirst(field) {
	case "uid":
		return me.uid.SetString(value)
	case "code":
		return me.code.SetString(value)
	case "name":
		return me.name.SetString(value)
	case "passwd":
		return me.passwd.SetString(value)
	case "genre":
		return me.genre.SetString(value)
	case "email":
		return me.email.SetString(value)
	case "tel":
		return me.tel.SetString(value)
	case "mobile":
		return me.mobile.SetString(value)
	case "areaId":
		return me.areaId.SetString(value)
	case "orgId":
		return me.orgId.SetString(value)
	case "loginName":
		return me.loginName.SetString(value)
	case "dimission":
		return me.dimission.SetString(value)
	case "dimissionTime":
		return me.dimissionTime.SetString(value)
	case "freeze":
		return me.freeze.SetString(value)
	case "freezeTime":
		return me.freezeTime.SetString(value)
	case "roleIds":
		return me.roleIds.SetString(value)
	}
	return me.Sys.SetString(field, value)
}

func (me *Entity) Table() schema.Table {
	return me.table
}

func (me *Entity) Type(column string) (entity.Type, bool) {
	switch column {
	case ENTITY_UID.Name():
		return &me.uid, true
	case ENTITY_CODE.Name():
		return &me.code, true
	case ENTITY_NAME.Name():
		return &me.name, true
	case ENTITY_PASSWD.Name():
		return &me.passwd, true
	case ENTITY_GENRE.Name():
		return &me.genre, true
	case ENTITY_EMAIL.Name():
		return &me.email, true
	case ENTITY_TEL.Name():
		return &me.tel, true
	case ENTITY_MOBILE.Name():
		return &me.mobile, true
	case ENTITY_AREA_ID.Name():
		return &me.areaId, true
	case ENTITY_ORG_ID.Name():
		return &me.orgId, true
	case ENTITY_LOGIN_NAME.Name():
		return &me.loginName, true
	case ENTITY_DIMISSION.Name():
		return &me.dimission, true
	case ENTITY_DIMISSION_TIME.Name():
		return &me.dimissionTime, true
	case ENTITY_FREEZE.Name():
		return &me.freeze, true
	case ENTITY_FREEZE_TIME.Name():
		return &me.freezeTime, true
	case ENTITY_ROLE_IDS.Name():
		return &me.roleIds, true
	}
	return me.Sys.Type(column)
}

func (me *Entity) Column(field string) (schema.Column, bool) {
	switch strings.ToLowerFirst(field) {
	case "uid":
		return ENTITY_UID, true
	case "code":
		return ENTITY_CODE, true
	case "name":
		return ENTITY_NAME, true
	case "passwd":
		return ENTITY_PASSWD, true
	case "genre":
		return ENTITY_GENRE, true
	case "email":
		return ENTITY_EMAIL, true
	case "tel":
		return ENTITY_TEL, true
	case "mobile":
		return ENTITY_MOBILE, true
	case "areaId":
		return ENTITY_AREA_ID, true
	case "orgId":
		return ENTITY_ORG_ID, true
	case "loginName":
		return ENTITY_LOGIN_NAME, true
	case "dimission":
		return ENTITY_DIMISSION, true
	case "dimissionTime":
		return ENTITY_DIMISSION_TIME, true
	case "freeze":
		return ENTITY_FREEZE, true
	case "freezeTime":
		return ENTITY_FREEZE_TIME, true
	case "roleIds":
		return ENTITY_ROLE_IDS, true
	}
	return me.Sys.Column(field)
}

func (me *Entity) Columns() []schema.Column {
	return []schema.Column{
		ENTITY_ID,
		ENTITY_MEMO,
		ENTITY_CREATES,
		ENTITY_CREATER,
		ENTITY_CREATED,
		ENTITY_MODIFIER,
		ENTITY_MODIFIED,
		ENTITY_VERSION,
		ENTITY_DELETION,
		ENTITY_ARTIFICAL,
		ENTITY_HISTORY,
		ENTITY_UID,
		ENTITY_CODE,
		ENTITY_NAME,
		ENTITY_PASSWD,
		ENTITY_GENRE,
		ENTITY_EMAIL,
		ENTITY_TEL,
		ENTITY_MOBILE,
		ENTITY_AREA_ID,
		ENTITY_ORG_ID,
		ENTITY_LOGIN_NAME,
		ENTITY_DIMISSION,
		ENTITY_DIMISSION_TIME,
		ENTITY_FREEZE,
		ENTITY_FREEZE_TIME,
		ENTITY_ROLE_IDS,
	}
}

func (me *Entity) Names() []string {
	return []string{
		"id",
		"memo",
		"creates",
		"creater",
		"created",
		"modifier",
		"modified",
		"version",
		"deletion",
		"artifical",
		"history",
		"uid",
		"code",
		"name",
		"passwd",
		"genre",
		"email",
		"tel",
		"mobile",
		"areaId",
		"orgId",
		"loginName",
		"dimission",
		"dimissionTime",
		"freeze",
		"freezeTime",
		"roleIds",
	}
}

func (me *Entity) Value() *Entity {
	return me
}

func (me *Entity) Validate() error {
	return nil
}

func (me *Entity) JSON() string {
	var b bytes.Buffer
	b.WriteString("{")
	b.WriteString(`"id":"` + jsons.Format(me.GetString("id")) + `"`)
	b.WriteString(`,"memo":"` + jsons.Format(me.GetString("memo")) + `"`)
	b.WriteString(`,"creates":"` + jsons.Format(me.GetString("creates")) + `"`)
	b.WriteString(`,"creater":"` + jsons.Format(me.GetString("creater")) + `"`)
	b.WriteString(`,"created":` + me.GetString("created"))
	b.WriteString(`,"modifier":"` + jsons.Format(me.GetString("modifier")) + `"`)
	b.WriteString(`,"modified":` + me.GetString("modified"))
	b.WriteString(`,"version":` + me.GetString("version"))
	b.WriteString(`,"deletion":` + me.GetString("deletion"))
	b.WriteString(`,"artifical":` + me.GetString("artifical"))
	b.WriteString(`,"history":` + me.GetString("history"))
	b.WriteString(`,"uid":"` + jsons.Format(me.GetString("uid")) + `"`)
	b.WriteString(`,"code":"` + jsons.Format(me.GetString("code")) + `"`)
	b.WriteString(`,"name":"` + jsons.Format(me.GetString("name")) + `"`)
	b.WriteString(`,"passwd":"` + jsons.Format(me.GetString("passwd")) + `"`)
	b.WriteString(`,"genre":"` + jsons.Format(me.GetString("genre")) + `"`)
	b.WriteString(`,"email":"` + jsons.Format(me.GetString("email")) + `"`)
	b.WriteString(`,"tel":"` + jsons.Format(me.GetString("tel")) + `"`)
	b.WriteString(`,"mobile":"` + jsons.Format(me.GetString("mobile")) + `"`)
	b.WriteString(`,"areaId":"` + jsons.Format(me.GetString("areaId")) + `"`)
	b.WriteString(`,"orgId":"` + jsons.Format(me.GetString("orgId")) + `"`)
	b.WriteString(`,"loginName":"` + jsons.Format(me.GetString("loginName")) + `"`)
	b.WriteString(`,"dimission":"` + jsons.Format(me.GetString("dimission")) + `"`)
	b.WriteString(`,"dimissionTime":` + me.GetString("dimissionTime"))
	b.WriteString(`,"freeze":"` + jsons.Format(me.GetString("freeze")) + `"`)
	b.WriteString(`,"freezeTime":` + me.GetString("freezeTime"))
	b.WriteString(`,"roleIds":"` + jsons.Format(me.GetString("roleIds")) + `"`)
	b.WriteString("}")
	return b.String()
}

func (me *Entity) ExcelColumns() []string {
	return nil
}
